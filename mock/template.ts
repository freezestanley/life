import Mock from 'mockjs';
const Random = Mock.Random;
export default {
  'POST /api/template/list': Mock.mock({
    success: true,
    message: '',
    code: '',
    pageNum: null,
    pageSize: null,
    value: {
      data: [],
      total: 0,
    },
  }),
  'POST /api/backend/admin/endorsement/queryEndorsementPersonPage': Mock.mock({
    success: true,
    message: '',
    code: '',
    pageNum: null,
    pageSize: null,
    value: {
      total: 100,
      'data|20': [
        {
          endorsementEffectiveDate: 'string',
          endorsementType: '1',
          id: () => Mock.mock('@id'),
          idNumber: () => Mock.mock('@id'),
          mainInsuredName: 'string',
          mainInsuredRelation: '0',
          name: 'string',
          programmeAlias: 'string',
        },
      ],
    },
  }),
  'POST /api/backend/admin/endorsement/queryOrderDetail': Mock.mock({
    success: true,
    message: '',
    code: '',
    pageNum: null,
    pageSize: null,
    value: {
      actualTotalPremium: 0,
      companyPremium: 0,
      effectiveDate: '2021-03-25T05:53:09.358Z',
      expireDate: '2021-03-25T05:53:09.358Z',
      goodsBeneficiaryType: 'string',
      goodsName: 'string',
      groupInvoiceVO: {
        bankAccount: 'string',
        bankCode: 'string',
        bankName: 'string',
        branchBankName: 'string',
        companyAddress: 'string',
        companyPhone: 'string',
        invoiceTitle: 'string',
        invoiceType: 'string',
        taxpayerId: 'string',
        taxpayerType: 'string',
      },
      groupOrderApplicantVO: {
        companyFileDto: {
          businessLicenseFileName: 'string',
          businessLicenseUrl: 'string',
        },
        companyInfoDto: {
          bankAccount: 'string',
          bankCode: 'string',
          bankName: 'string',
          bfdCompanyId: 'string',
          branchBankName: 'string',
          broker: 'string',
          brokerCode: 'string',
          businessScope: 'string',
          channel: 'string',
          companyAddress: 'string',
          companyName: 'string',
          companyTelephone: 'string',
          companyType: 'string',
          hasCooperation: 0,
          id: 'string',
          idNumber: 'string',
          idType: 'string',
          industryCategory: 'string',
          linkmanAddr: 'string',
          linkmanCityCode: 'string',
          linkmanEmail: 'string',
          linkmanName: 'string',
          linkmanPhone: 'string',
          linkmanProvinceCode: 'string',
          linkmanTownCode: 'string',
          sponsor: 'string',
          sponsorCode: 'string',
          taxpayerCode: 'string',
          taxpayerType: 'string',
        },
      },
      isNeedInvoice: 'string',
      isNeedPaper: 'string',
      isSyncCrm: 'string',
      orderNo: 'string',
      'progammeName|3': ['string'],
      'programmeAlias|3': ['string'],
      requestNo: 'string',
      totalEmployeePremium: 0,
    },
  }),
  'POST /api/backend/admin/endorsement/queryInsureProgrammeList': Mock.mock({
    success: true,
    message: '',
    code: '',
    pageNum: null,
    pageSize: null,
    value: {
      total: 33,
      'data|3': [
        {
          occCategory: 'string',
          personCount: 0,
          programmeAlias: 'string',
          programmeId: 'string',
          'programmeLiabilityList|3': [
            {
              amountUnit: 'string',
              factorValue: 'string',
              isCanInsure: 'string',
              liabilityAmount: 'string',
              liabilityDesc: 'string',
              liabilityName: 'string',
              liabilityOrder: 0,
              liabilityShortDesc: 'string',
            },
          ],
          programmeName: 'string',
          programmeSeq: 'string',
          totalPrice: 0,
          'uwAge|3': ['string'],
        },
      ],
    },
  }),
  'POST /api/backend/admin/endorsement/queryInsuredList': Mock.mock({
    success: true,
    message: '',
    code: '',
    pageNum: null,
    pageSize: null,
    value: {
      'data|3': [
        {
          birthday: '2021-03-25T05:53:09.337Z',
          comboName: 'string',
          gender: 'string',
          mainInsuredName: 'string',
          mainInsuredRelation: 'string',
          name: 'string',
          premium: 0,
          programmeAlias: 'string',
          programmeName: 'string',
          programmeSeq: 'string',
          selfPayAmount: 0,
        },
      ],
      total: 33,
    },
  }),
  'POST /api/backend/admin/endorsement/queryEndorsementPersonDetail': Mock.mock(
    {
      additionalInfo: {},
      code: 'string',
      message: 'string',
      success: true,
      value: {
        newDetail: {
          insuredInfo: {
            bankAccount: 'string',
            bankname: 'string',
            birthday: '2020-01-22',
            email: 'string',
            gender: 'F',
            hasSocialInsurance: 'string',
            idNumber: 'string',
            idType: 'string',
            inductionDate: 'string',
            level: 'string',
            mainInsuredRelation: 'string',
            name: 'string',
            occCode: '01,0101',
            personalStatus: 'string',
            phoneNumber: 'string',
            salary: 'string',
          },
          mainInsuredInfo: {
            idNumber: 'string',
            idType: 'string',
            name: 'string',
          },
          otherInfo: {
            endorsementCertNo: 'string',
            endorsementEffectiveDate: 'string',
            endorsementNo: 'string',
            payablePremium: 'string',
            programmeAlias: 'string',
            refundPremium: 'string',
          },
        },
        oldDetail: {
          insuredInfo: {
            bankAccount: 'string',
            bankname: 'string',
            birthday: '2020-2-12',
            email: 'string',
            gender: 'F',
            hasSocialInsurance: 'string',
            idNumber: 'string',
            idType: 'string',
            inductionDate: 'string',
            level: 'string',
            mainInsuredRelation: 'string',
            name: 'string',
            occCode: 'string',
            personalStatus: 'string',
            phoneNumber: 'string',
            salary: 'string',
          },
          mainInsuredInfo: {
            idNumber: 'string',
            idType: 'string',
            name: 'string',
          },
          otherInfo: {
            endorsementCertNo: 'string',
            endorsementEffectiveDate: 'string',
            endorsementNo: 'string',
            payablePremium: 'string',
            programmeAlias: 'string',
            refundPremium: 'string',
          },
        },
      },
    },
  ),
};
